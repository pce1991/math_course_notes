#+HTML_HEAD: <style type="text/css">body{ max-width: 800px; font-size: x-large; }</style>
#+HTML_MATHJAX: scale: 400 align: left indent: 0em tagside: left font: Cambria
#+HTML_MATHJAX: cancel.js noErrors.js

#+TITLE: Mathematics in Game Development  
#+AUTHOR: Patrick Collin Eye
#+EMAIL: ceye@dcccd.edu

# Documentation for latex/mathjax commands in org
# https://orgmode.org/mathjax/docs/html/tex.html

* Course Description
  This is an overview and introduction to the fundamental math you need for game development. 
  We do not go in depth on many topics. 
  The goal isn't to teach you everything you'll ever need to know. It's to introduce you to a lot of topics in the field which you can go more in depth when needed. I want you to have the tools you study more on your own, and to figure out how to solve problems. 
  We'll learn some algebra, geometry, trigonometry, and linear algebra. These are all entire fields of mathematics. 

  Usually in games we encounter unique and specific problems, so you can't just plug in solutions. Part of your job as a game programmer is being able to do the math to solve problems.

  Game developers often have to read up on a specific topic. This means researching, finding and reading mathematical papers.
* Goals
  How to break down and solve problems.
  Survey of how math is used in game development. 
  How to express design in terms of math. 
* Intro Quiz
  Maybe this will intimidate people? 
  Could be interesting to just list a bunch of terms, see how many they can provide a definition for, and then by the end they should know them all. 
* List
  List all the types of math problems you can think of in games. Can be simple equations like "how many pixels of the health bar should we draw" or more sophisticated things like collision detection, rendering, etc
  This is probably a better type of intro quiz, and ice-breaking exercise. 
** Weapon damage
   A weapon deals damage 42 times per second. The player has 100 health. If you want the player to be killed in 1 second assuming that all 42 hits landed, how much damage should it deal?

   How would increasing the damage affect how quickly the player dies? (faster obviously, but what's the proportion)
** Door 1
   You want a door to swing open in 1.5 seconds. How many radians should it move per second to reach the open position (how many degrees is the open position?). How many radians should it move per frame (assuming 60 frames a second)
** Door 2
   The door handle is attached to the player's hand in some way. Calculate how many radians you should rotate it by, based on the distance the player has traveled this frame. (need to calculate the LEFT vector)
   (this is from Stageplay)
** Mario Chain Enemy
   The player can move 2 meters per second. 
   There is an enemy chained to a post. It can move at 2.5 m/s
   How long should it's chain be to make sure that the player can escape if they don't get too close (this is pretty vague. How about if they don't get more than half-way the chain-length to the post)
* Intro
  Math is everywhere. 
  "The unreasonable effectiveness of mathematics in the natrual sciences."
  There is no agreed upon undertsanding of what math is. Some people say that it's a description of how the universe works, but that doesn't mean there is any math actually going on. It's just a language which is suited to describing the types of things that do happen. It's like describing colors. We know that the color of a rose is because it absorbs all other lightwaves. Calling it red is a conveinent and expressive way to describe that process. 
  Another school of thought is that yes, there are definitely mathematical processes going on. 

  While this is very profound, interesting, and important stuff, we'll stick with a more meager defintion: Math is one of the tools that programmers use to express game design. 
  What's interesting about this is that whether or not math merely describes, or actually determines the world, in a computer program, it most definitely determines it. 
* Activities in Class
  I have 2 2 hour classes a week. 

  Look at a feature in a video game and describe it in terms of mathematics. 
  -- Problems: easy to pick a cheap answer like "their healthbar goes down". A lot of stuff is hidden: "when the fov decreases far away objects appear close because the projection matrixs transforms points..."
  -- Could begin to notice more sophisticated things as their understanding increases. 

  Come up with gameplay features that you can desribe mathematically. 

  We can do coding exercises in class. It'll help introduce students to programming concepts.
* Homework
  Need to write it out and turn in on paper. No email, no ecampus. Must be turned in in class. 

  Need to visualize the problem ( I don't wanna hear "I'm not a visual person". Part of education is learning different ways of learning. I'm not an auditory learner, but if I'm playing piano it'd be foolish to do it without listening. )
* Arithmetic
  We have 4 basic operations
  Addition
  Subtraction
  Multiplication
  Division

  Order of operations! PEMDAS. This is a convention that everyone adheres to about what order to do operations in. 
  I try to be very explicit about specifying the order that I want operations to happen in. 
  Parentheses
  Exponents
  Multiplication
  Division
  Addition
  Subtraction

  Types of numbers:
  - Whole/natural numbers
  \begin{equation}
  (0, 1, 2, 3 ...)
  \end{equation}
  - Integers: 
  \begin{equation}
  (... -3, -2, -1, 0, 1, 2, 3, ...)
  \end{equation}
  - Real numbers: 
  \begin{equation}
  (-1001, ... -3.145, ... -0.1001, ... 0a ... 0.999, ... 1, ... 2.71828, ...)
  \end{equation}


  We will primarily be dealing with real numbers because games are continuous in space and not discrete. (go into a bit of history about real numbers). 
  Whole numbers do come up a lot when we are talking about the number of elements of something, a specific instnace of something, and so on. 

** Powers
  Raising a number N to a power M means to multiply N by itself M times.
  \begin{equation}
  2^{3} = 2 * 2 * 2 = 8
  \end{equation}  

  A number raised to the 0 power always equals 1. 

  A number raised to the 1 power always equals itself.

  Raising a number N to a power -M 
** Roots
* Variables
  In math and programming we use variables to refer to values and expressions. 
  A value is just a number. 
  An expression is a series of operations. 2 + 2, 0 - 1, 8 * 3, 9 / 2, are all expressions

  A variable is a representation or name used to represent a value.

  In math we never have a variable that equals two different things. Once it's value is stated, it never changes. 

  To make a variable we simply write the name, an equals sign, and then a value 
  x = 1001
  y = 9
  n = 256

Usually we use single letters for variables in math, but often in programming we use names, because what we're representing is not abstract, but concrete. 

* Equations
  Equations are statements saying that something is true. 
  The simplest equation would be something like 

  The simplest type of equation is once that we can compute, and determine it's truthfullness based on the value produced. 
  2 + 2 = 4 
  0 - 1 = -1

  Other examples
  \begin{equation}
  x = 2 * 2 * 2
  \end{equation}
  \begin{equation}
  y = 1 + \frac{2}{3}
  \end{equation}

  The two main things equations are used for: 
    To produce a value given certain inputs. This is called a function. They are written like f(x) = ...
      -- (do I want to harp on the every input must produce unique output?) )
      These are really useful for things like "want something to change like this over time"
      "This is how much health to take away if my armor is x and their damage is y"
    To solve and figure out the desired value (this can be used for things like "if my character is moving this fast, and I want a character to catch him in 10 seconds if he's this far away, how fast should my character go?)
      What is the distance between two points in space (characters, items, UI elements, etc)
      $ MORE OBVIOUS EXAMPLES

  

  You can do operations on an equation, but anything you do to one side of the equation you must do to the other. Otherwise it will no longer be the same equation. 
  These are known as "reciprocal operations" and let you rephrase/rearrange your problem. 

  Parametric Equations: These assign an function to each parameter. We use these a lot in games. 
  Example: when spawning enemies you want them to appear in a circle around a certain point. You would define their x and y position with the cos and sin functions respectively.

  An equation can have more than one unknown. 

** Solving Equations
* Cartesian Coordinates
  Just like we have a number line for 1 dimension, we can create two perpendicular number lines.
* Unit Circle / Trig
  Trig is most useful in 2 dimensions. Linear algebra is amuch more useful tool for dealing with 3D gemoetry. But a lot of problems in games can actually be reduced to 2 dimensions, at which point trig becomes very useful again. Example: turning a 3D model of a character. It's true that our game is 3D, but the rotation of our character's body is essentially 2D: they're on a flat surface, and they are always oriented upright. So we can use trig to find the radians about their upright vector to turn the character. Being able to express a problem in simpler, more confined terms is usually a good thing. 
* Percentages and Interpolation
* Linear Algebra
  Addition & Subtraction & Scaling
  Length
  Dot product
  Cross Product
  Project onto line
  Projection matrix
  Coordinate systems

  \begin{equation*}
    v = 
    \begin{pmatrix}
    x \\
    y \\
    z \\
    \end{pmatrix}
  \end{equation*}

** Matrices
   A matrix multiplied by a vector produces a new vector. We say that it "transforms" that vector.
   
   We call this linear, because any point along the same line as the input vector will map to a point along the same line as the output vector. This Transformation is *big deal*
   
   Using a particular matrix, we can transform a point in 3D space onto a 2 dimensional surface. That 2D surface is a screen. 

   We can say that our vector is how how many units to move along our basis vectors \hat{i} and \hat{j}

   Let's put our basis vectors into a matrix

   \begin{equation*}
     I = 
     \begin{pmatrix}
     1 & 0 \\
     0 & 1 \\
     \end{pmatrix}
   \end{equation*}

   This is known as an Identity matrix because if we multiply any vector by this matrix, we'll get the same vector, just 

   \begin{equation}   
   N * 1 = N
   \begin{end}   

   \begin{equation}   
   I * V = V
   \begin{end}   

   To see how this works let's see how we multiply a vector by a matrix. 

   \begin{equation*}
     \begin{pmatrix}
     a & c \\
     b & d \\
     \end{pmatrix}

     * 

     \begin{pmatrix}
     x \\
     y \\
     \end{pmatrix}

     = 
     
     \begin{pmatrix}
     x * a + y * c \\
     x * b + y * d \\
     \end{pmatrix}
     
   \end{equation*}

   Algorithmically you can think of this process as taking each row of our matrix M, and multiplying it by our vector V. The Nth row of \prime{V} = the nth row of M * V.

   Another way to visualize this is:

\begin{equation*}
     \begin{pmatrix}
     a & c \\
     b & d \\
     \end{pmatrix}

     * 

     \begin{pmatrix}
     x \\
     y \\
     \end{pmatrix}

     = 

     x * 
     \begin{pmatrix}
     a \\
     b \\
     \end{pmatrix}

     +

     y * 
     \begin{pmatrix}
     c \\
     d \\
     \end{pmatrix}
   \end{equation*}

   Plugging in the values of our matrix I we can see that it doesn't change the vector at all. 
   
   \begin{equation*}
     \begin{pmatrix}
     1 & 0 \\
     0 & 1 \\
     \end{pmatrix}

     * 

     \begin{pmatrix}
     x \\
     y \\
     \end{pmatrix}

     = 
     
     \begin{pmatrix}
     x * 1 + x * 0 \\
     y * 0 + y * 1 \\
     \end{pmatrix} 

     =
     
     \begin{pmatrix}
     x \\
     y \\
     \end{pmatrix}

   \end{equation*}


   Let's look at how to rotate a vector by 90 degrees using a matrix. First let's see what our basis vectors are if we rotate them by 90 degrees. 

\begin{equation*}
     \begin{pmatrix}
     0 & -1 \\
     1 & 0 \\
     \end{pmatrix}
\begin{equation*}
        
    Notice that our \hat{i} vector is vertical, and our \hat{j} is horizontal.

    Now if we have a vector 

\begin{equation*}
     v = 
     \begin{pmatrix}
     1 \\
     1 \\
     \end{pmatrix}
   \end{equation*}

   We can plug the numbers in and do our multiplication, OR we can just visualize is. We'll take V and move it up 1, and then left 1. 

   Becaues we're programmers we really aren't manually rotating matrices very often. It's useful to know how to do it, so you can write a function that does it for you, or solve a problem by hand if you really need to (and you might), but this visualization is something that we do all the time. 

   Part2: composing matrix transformations. Matrix multiplication

   # VECTOR (make this an emacs function)
   \begin{equation*}
     v = 
     \begin{pmatrix}
     x \\
     y \\
     z \\
     \end{pmatrix}
   \end{equation*}

   Part 2: 
   Homogeneous vector, and packing multiple transformations into a single matrix. 

   Part 4: 3D transformations

** Solving equations
   We can take multiple equations, put the coefficients into a matrix, and the variables into the input vector, and the righthandside of the equations into the output vector.

   To solve this we need to find which input vector this matrix maps to the output vector. We get this by applying the inverse matrix to the output vector.
   Finding an inverse of an arbitrary matrix is expensive. 
   
   \begin{equation*}
   A = 
   \begin{pmatrix}
   1 & 2 & 3 \\
   4 & 5 & 6 \\
   7 & 8 & 9
   \end{pmatrix}
   \end{equation*}
** Eigenvector
   Any vector which is only scaled when multiplied by a matrix M is called an Eigenvector of that matrix. How much its scaled by is called the Eigenvalue
* 3D geometry
  Planes
  Line
  Rays
  Vertices
  Collision Detection: point-shape, line-shape, line-line, shape-shape intersection. Closest points on line, on shape
* Calculus
  Limits
  Derivative
  Integral
  Fundamental Theorem of Calculus
* Discrete Mathematics
  Games simulate continuous motion by displaying a series of discrete frames quickly. Everything that happens in a game, under the hood, is discrete. We simulate at time t, then draw the results, then simulate at time t2. Even tho the equation may be continuous, we are simulating it in discrete chunks. 
  Example: if an object is moving to the right with velocity 60, and our FPS is 60, then it will move 1 unit every frame. That means if we frame-stepped our game we would see it teleport between coordinate 0 & 1, 1 & 2, etectera
  This does not seem to be the way the world really works (?)
* Algorithms
  In programming we are making defining processes that happen over time. The description or rules of a process are called an algorithm. We're all familiar with algorithms in our daily life: how to bake a cake is an algorithm because it gives instructions of what steps to execute to produce the desired output. 
  
  Thinking in terms of algorithms is important for game programmers because we are dealing with complex systems and the desired outcome is ususally many steps away. Math is one of the tools we use to describe the operations we want to perform, but it is ususally not as simple as doing one thing. 
  
  Example: you have an NPC who you want to rotate to face an object. You can describe mathematically how much you want him to turn. You can even describe how much you want him to turn every frame, so that it happens over time. But you also need to figure out when he should start facing an object; for how long he should face it; how he picks the object to face, and so on.

  There are a two basic tools that programmers use to create algorithms.
  
  - Conditionals :: This is a way to specify if some instruction should be carried out based on a condition being satisfied (meaning that it is true). Usually these are written using "if" and "else". 

    *Example*: In a recipe you don't put the cake in the oven until the temperature is 400 degrees.

  - Loops :: This is a way to specify that we want an instruction carried out N times, or until a certain condition is satisfied.

    *Example 1*: take 3 eggs and crack them into a bowl. 
    
    *Example 2*: 
    1) Put a slice of bacon in the pan. 
    2) /IF/ there is room, goto step 1)
 
  Often we will write algorithms with numbers next to the step so that we can refer to a step with a number, and issue instructions like "goto intsruction N".
  
  Let's look at an example of a cake recipe to see an algorithm:
  
  1) Get a bowl, 3 eggs, flour, sugar, and butter
  2) /LOOP/:
     - Take an egg and put in the bowl
     - /IF/ there are less than 3 eggs in the bowl, goto step 2)
  3) Put 2 cups of flower in the bowl.
  4) Put 1 stick of butter in the bowl.
  5) Preheat the oven to 400 degrees.
  6) /IF/ the oven is not 400 degrees, goto step 8)
  7) Put the bowl in the oven.
  8) Wait.
  9) /IF/ it has been 30 minutes, goto step 10). /ELSE/ goto step 8)
  10) Take the cake out of the oven.
   
  An algorithm that underlies all games is this:
  
  1) /LOOP/:
     - GetInput()
     - Simulate()
     - Render()
     - /IF/ game-over goto 2)
     - /ELSE/ goto step 1)
  2) Close the game.

# C-c ' to edit source-code 
#+BEGIN_SRC C
  int main() {
      printf("Hello World 0123");
  }
#+END_SRC
* Probability
  LOST ALL THIS DATA FUCK!
{this is the only example I've found where P(A | B) doesn't just wind up being P(A). The fact that they are almost always the same is really not intuitive to me. }

** Problems
   Given a card-game find how many copies of cards you're allowed to have in a deck if you want the probability of drawing that card to be N

   Find the probabilities of the different hands in poker. 
   How would you change the rules to increase the probability of getting certain hands?
   How about increasing the probability gap between the lower tier and higher tier hands (like let's say you want 30% chance of a low-tier hand, but a 1% chance of getting the highest hand)

* Quotes
  In my opinion, everything happens in nature in a mathematical way. 
  
  -- Renes Descarte



  Counting is the religion of this generation it is its hope and its salvation.
  
  -- Gertrude Stein



  "If you manage to look closely enough at this simulation function, you will always inevitably find some point, actually many points, where the implementation actually happens in the universe, and not from the programmer. And what the programmer has managed to do is encapsulate a bunch of these little things that the universe does until he has built up a bigger structure."
  
  -- Jonathan Blow
* Vocabulary
  Analogy
  
  Metaphor
  
  Parallel
  
  Horizontal
  
  Vertical
* Resources
** Online
- [[https://www.youtube.com/watch?v=fNk_zzaMoSs&list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab][3Blue1Brown Linear Algebra Playlist]]

- [[https://www.youtube.com/watch?v=WUvTyaaNkzM&list=PLZHQObOWTQDMsr9K-rj53DwVRMYO3t5Yr][The Essence of Calculus]]

- [[https://www.youtube.com/watch?v=d4EgbgTm0Bg][Visualizing Quaternions]]

- [[https://www.khanacademy.org/][Kahn Academy]]
  - Lots of video courses on math.

- [[http://www.allenchou.net/blog/][Allen Chou's Website]]
  - Various tutorials on some math and physics game dev stuff by a programmer at Naughty Dog

- [[https://www.youtube.com/watch?v=C5FUtrmO7gI][Truth in Game Design]]
  - Lecture by Jonathon Blow which touches on how math and games relate.

Immersive Math visual textbook
- http://immersivemath.com/ila/index.html

Math For Game Programmers GDC Talk Series
- https://www.youtube.com/results?search_query=gdc+math+for+game+programmers

Papers We Love
- https://www.youtube.com/user/PapersWeLove/videos

The Applications of Matrices
- https://www.youtube.com/watch?v=rowWM-MijXU&t=9s

Geometry of Linear Algebra (MIT Course of which there are more videos)
- https://www.youtube.com/watch?v=uNKDw46_Ev4
** Books
   Real-Time Collision Detection

   Concrete Mathematics
   
   Real-Time Rendering
